name: ci
on:
  push:
    branches:
      - "**"
  workflow_dispatch:
    inputs:
      deploy-to-dev:
        description: "Whether to deploy to dev"
        type: boolean
        required: true
        default: false

env:
  APPLICATION_NAME: "GitHubActionsCiDashboard"
  CDK_ECR_TAG_NAME: "GitHubActionsCiDashboard"
  BUILD_FAILURE_SLACK_CHANNEL: "#experiments-dev-info"

defaults:
  run:
    # NOTE: A bit stricter than the default bash options used by GitHub Actions
    # (bash --noprofile --norc -e -o pipefail {0})
    shell: bash --noprofile --norc -euo pipefail {0}

# NOTE: Set concurrency for the current workflow to 1
concurrency: ci-${{ github.ref }}-${{ github.workflow }}

jobs:
  build-and-deploy:
    timeout-minutes: 60
    runs-on: ubuntu-22.04
    permissions:
      actions: read
      contents: read
      id-token: write
      packages: read
      deployments: write
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - uses: capralifecycle/actions-lib/check-runtime-dependencies@3dcbb3bf9fff687253cc5f1756238eda2fbc2fef # v1.5.3

      - uses: capralifecycle/actions-lib/parse-config@3dcbb3bf9fff687253cc5f1756238eda2fbc2fef # v1.5.3
        id: config
        with:
          config-file: ".ldp.json"

      - uses: actions/setup-java@b36c23c0d998641eff861008f374ee103c25ac73 # v4.4.0
        with:
          distribution: "zulu"
          java-version: "21"
          java-package: jdk

      - name: cache mvn
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: build and test
        env:
          SONARCLOUD_TOKEN: ${{ secrets.SHARED_SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.SHARED_GITHUB_PACKAGES_TOKEN }}
          GIT_COMMIT_SHA: ${{ github.sha }}
          RUN_NUMBER: ${{ github.run_number }}
          BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
        run: mvn -B -U verify --no-transfer-progress

      - name: show errors
        if: ${{ failure() }}
        env:
          FAILS_FILE: ${{ runner.temp }}/fails.txt
        run: |
          echo '## Build failure  ' >> $GITHUB_STEP_SUMMARY
          { find . -type f -path '*target/surefire-reports/*.txt' -exec grep -l -E '(Failures: [^0]|Errors: [^0])' {} >> "${FAILS_FILE}" \; || :; }
          { find . -type f -path '*target/failsafe-reports/*.txt' -exec grep -l -E '(Failures: [^0]|Errors: [^0])' {} >> "${FAILS_FILE}" \; || :; }

          while IFS="" read -r errorFile || [ -n "$errorFile" ]; do
            echo "**${errorFile}**  " >> $GITHUB_STEP_SUMMARY
            echo '```text' >> $GITHUB_STEP_SUMMARY
            cat "${errorFile}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo '---' >> $GITHUB_STEP_SUMMARY
          done < "${FAILS_FILE}"

      - uses: capralifecycle/actions-lib/configure-aws-credentials@3dcbb3bf9fff687253cc5f1756238eda2fbc2fef # v1.5.3
        id: aws
        with:
          aws-account-id: ${{ steps.config.outputs.accountId }}
          # NOTE: We use different roles on default and non-default branches
          aws-iam-role-name: ${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && steps.config.outputs.roleName || steps.config.outputs.limitedRoleName }}
          authenticate-to-ecr: true

      - uses: capralifecycle/actions-lib/generate-tag@3dcbb3bf9fff687253cc5f1756238eda2fbc2fef # v1.5.3
        id: tag
        with:
          tag-prefix: "${{ env.APPLICATION_NAME }}"

      - name: build and conditionally push docker image
        env:
          ECR_REPOSITORY_URI: "${{ steps.config.outputs.accountId }}.dkr.ecr.eu-west-1.amazonaws.com/${{ steps.config.outputs.ecrRepository }}"
          DEFAULT_TAG: "${{ steps.tag.outputs.tag }}"
          CONDITIONAL_PUSH: "${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) || inputs.deploy-to-dev }}"
          GIT_COMMIT_SHA: "${{ github.sha }}"
        run: |
          image_id="$(docker build -q --build-arg service_version=$GIT_COMMIT_SHA .)"
          if [ "$CONDITIONAL_PUSH" = "true" ]; then
            docker tag "$image_id" "$ECR_REPOSITORY_URI:$DEFAULT_TAG"
            docker push "$ECR_REPOSITORY_URI:$DEFAULT_TAG"
          fi

      #- name: trigger development deployment pipelines
      #  uses: capralifecycle/actions-lib/trigger-deployment-pipeline@6eec40efec972ae86feb9dac823a34067f1d2384 # v1.3.0
      #  if: ${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) || inputs.deploy-to-dev }}
      #  env:
      #    AWS_ACCESS_KEY_ID: ${{ steps.aws.outputs.aws-access-key-id }}
      #    AWS_SECRET_ACCESS_KEY: ${{ steps.aws.outputs.aws-secret-access-key }}
      #    AWS_SESSION_TOKEN: ${{ steps.aws.outputs.aws-session-token }}
      #  with:
      #    pipelines: ${{ steps.config.outputs.devPipelines }}
      #    aws-s3-bucket-name: ${{ steps.config.outputs.artifactBucket }}
      #    trigger-type: "artifact"
      #    # NOTE: The key passed to artifact-parameters will be the name of
      #    # the SSM parameter where the reference to the artifact is stored.
      #    artifact-parameters: "dev${{ env.CDK_ECR_TAG_NAME }}EcrTag=${{ steps.tag.outputs.tag }}"

      - name: trigger production deployment pipelines
        uses: capralifecycle/actions-lib/trigger-deployment-pipeline@3dcbb3bf9fff687253cc5f1756238eda2fbc2fef # v1.5.3
        if: ${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.aws.outputs.aws-access-key-id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.aws.outputs.aws-secret-access-key }}
          AWS_SESSION_TOKEN: ${{ steps.aws.outputs.aws-session-token }}
        with:
          pipelines: ${{ steps.config.outputs.prodPipelines }}
          aws-s3-bucket-name: ${{ steps.config.outputs.artifactBucket }}
          trigger-type: "artifact"
          artifact-parameters: "prod${{ env.CDK_ECR_TAG_NAME }}EcrTag=${{ steps.tag.outputs.tag }}"

      - uses: capralifecycle/actions-lib/slack-notify@3dcbb3bf9fff687253cc5f1756238eda2fbc2fef # v1.5.3
        # NOTE: We only want to be notified about failures on the default branch
        if: ${{ failure() && github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
        with:
          bot-token: ${{ secrets.SHARED_SLACK_BOT_TOKEN }}
          channel: ${{ env.BUILD_FAILURE_SLACK_CHANNEL }}

      - uses: capralifecycle/actions-lib/configure-github-deployment@3dcbb3bf9fff687253cc5f1756238eda2fbc2fef # v1.5.3
        # NOTE: Create GitHub deployment on default branch regardless of job status
        if: ${{ always() && github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
